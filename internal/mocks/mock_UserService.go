// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/flapenna/go-ddd-crud/internal/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockUserService) CreateUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (*domain.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) *domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *MockUserService_Expecter) CreateUser(ctx interface{}, user interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(_a0 *domain.User, _a1 error) *MockUserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(context.Context, *domain.User) (*domain.User, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockUserService) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserService_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(_a0 error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, request
func (_m *MockUserService) ListUsers(ctx context.Context, request *domain.ListUsersQueryRequest) (*domain.ListUsersQueryResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *domain.ListUsersQueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListUsersQueryRequest) (*domain.ListUsersQueryResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListUsersQueryRequest) *domain.ListUsersQueryResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ListUsersQueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListUsersQueryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockUserService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - request *domain.ListUsersQueryRequest
func (_e *MockUserService_Expecter) ListUsers(ctx interface{}, request interface{}) *MockUserService_ListUsers_Call {
	return &MockUserService_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, request)}
}

func (_c *MockUserService_ListUsers_Call) Run(run func(ctx context.Context, request *domain.ListUsersQueryRequest)) *MockUserService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListUsersQueryRequest))
	})
	return _c
}

func (_c *MockUserService_ListUsers_Call) Return(_a0 *domain.ListUsersQueryResponse, _a1 error) *MockUserService_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_ListUsers_Call) RunAndReturn(run func(context.Context, *domain.ListUsersQueryRequest) (*domain.ListUsersQueryResponse, error)) *MockUserService_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// StartWatchingUsers provides a mock function with given fields: ctx
func (_m *MockUserService) StartWatchingUsers(ctx context.Context) {
	_m.Called(ctx)
}

// MockUserService_StartWatchingUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartWatchingUsers'
type MockUserService_StartWatchingUsers_Call struct {
	*mock.Call
}

// StartWatchingUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserService_Expecter) StartWatchingUsers(ctx interface{}) *MockUserService_StartWatchingUsers_Call {
	return &MockUserService_StartWatchingUsers_Call{Call: _e.mock.On("StartWatchingUsers", ctx)}
}

func (_c *MockUserService_StartWatchingUsers_Call) Run(run func(ctx context.Context)) *MockUserService_StartWatchingUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserService_StartWatchingUsers_Call) Return() *MockUserService_StartWatchingUsers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserService_StartWatchingUsers_Call) RunAndReturn(run func(context.Context)) *MockUserService_StartWatchingUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *MockUserService) UpdateUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (*domain.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) *domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *MockUserService_Expecter) UpdateUser(ctx interface{}, user interface{}) *MockUserService_UpdateUser_Call {
	return &MockUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *MockUserService_UpdateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserService_UpdateUser_Call) Return(_a0 *domain.User, _a1 error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_UpdateUser_Call) RunAndReturn(run func(context.Context, *domain.User) (*domain.User, error)) *MockUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
