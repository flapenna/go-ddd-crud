// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/flapenna/go-ddd-crud/internal/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// MockUserProducer is an autogenerated mock type for the UserProducer type
type MockUserProducer struct {
	mock.Mock
}

type MockUserProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserProducer) EXPECT() *MockUserProducer_Expecter {
	return &MockUserProducer_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: event
func (_m *MockUserProducer) SendMessage(event *domain.UserEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserProducer_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockUserProducer_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - event *domain.UserEvent
func (_e *MockUserProducer_Expecter) SendMessage(event interface{}) *MockUserProducer_SendMessage_Call {
	return &MockUserProducer_SendMessage_Call{Call: _e.mock.On("SendMessage", event)}
}

func (_c *MockUserProducer_SendMessage_Call) Run(run func(event *domain.UserEvent)) *MockUserProducer_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.UserEvent))
	})
	return _c
}

func (_c *MockUserProducer_SendMessage_Call) Return(_a0 error) *MockUserProducer_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserProducer_SendMessage_Call) RunAndReturn(run func(*domain.UserEvent) error) *MockUserProducer_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserProducer creates a new instance of MockUserProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserProducer {
	mock := &MockUserProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
