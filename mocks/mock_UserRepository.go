// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/flapenna/go-ddd-crud/internal/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockUserRepository) CreateUser(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *MockUserRepository_Expecter) CreateUser(ctx interface{}, user interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(_a0 error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, *domain.User) error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserById provides a mock function with given fields: ctx, id
func (_m *MockUserRepository) DeleteUserById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_DeleteUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserById'
type MockUserRepository_DeleteUserById_Call struct {
	*mock.Call
}

// DeleteUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepository_Expecter) DeleteUserById(ctx interface{}, id interface{}) *MockUserRepository_DeleteUserById_Call {
	return &MockUserRepository_DeleteUserById_Call{Call: _e.mock.On("DeleteUserById", ctx, id)}
}

func (_c *MockUserRepository_DeleteUserById_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_DeleteUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_DeleteUserById_Call) Return(_a0 error) *MockUserRepository_DeleteUserById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_DeleteUserById_Call) RunAndReturn(run func(context.Context, string) error) *MockUserRepository_DeleteUserById_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, request
func (_m *MockUserRepository) ListUsers(ctx context.Context, request *domain.ListUsersQueryRequest) (*domain.ListUsersQueryResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *domain.ListUsersQueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListUsersQueryRequest) (*domain.ListUsersQueryResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListUsersQueryRequest) *domain.ListUsersQueryResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ListUsersQueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListUsersQueryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockUserRepository_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - request *domain.ListUsersQueryRequest
func (_e *MockUserRepository_Expecter) ListUsers(ctx interface{}, request interface{}) *MockUserRepository_ListUsers_Call {
	return &MockUserRepository_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, request)}
}

func (_c *MockUserRepository_ListUsers_Call) Run(run func(ctx context.Context, request *domain.ListUsersQueryRequest)) *MockUserRepository_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListUsersQueryRequest))
	})
	return _c
}

func (_c *MockUserRepository_ListUsers_Call) Return(_a0 *domain.ListUsersQueryResponse, _a1 error) *MockUserRepository_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_ListUsers_Call) RunAndReturn(run func(context.Context, *domain.ListUsersQueryRequest) (*domain.ListUsersQueryResponse, error)) *MockUserRepository_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *MockUserRepository) UpdateUser(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *MockUserRepository_Expecter) UpdateUser(ctx interface{}, user interface{}) *MockUserRepository_UpdateUser_Call {
	return &MockUserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *MockUserRepository_UpdateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) Return(_a0 error) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) RunAndReturn(run func(context.Context, *domain.User) error) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
